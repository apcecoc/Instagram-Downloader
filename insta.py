import aiohttp
import hashlib
import os
from telethon.tl.types import Message
from .. import loader, utils

__version__ = (1, 0, 1)

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2024
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://example.com/instagram_icon.png
# meta banner: https://example.com/instagram_banner.jpg
# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

@loader.tds
class InstagramDownloaderMod(loader.Module):
    """Instagram Downloader for downloading multiple videos"""

    strings = {
        "name": "InstagramDownloader",
        "processing": "üîÑ <b>Processing your request...</b>",
        "invalid_url": "üö´ <b>Invalid Instagram URL. Please check the link and try again.</b>",
        "error": "‚ùå <b>An error occurred while fetching the content. Try again later.</b>",
        "success": "‚úÖ <b>Content downloaded successfully:</b>",
    }

    strings_ru = {
        "processing": "üîÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...</b>",
        "invalid_url": "üö´ <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>",
        "error": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.</b>",
        "success": "‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:</b>",
        "_cls_doc": "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å Instagram",
    }

    @loader.command(ru_doc="<–°—Å—ã–ª–∫–∞> –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å Instagram")
    async def igdl(self, message: Message):
        """<URL> Download Instagram content"""
        url = utils.get_args_raw(message)
        if not url or not url.startswith("http"):
            await utils.answer(message, self.strings("invalid_url"))
            return

        await utils.answer(message, self.strings("processing"))

        api_url = f"https://api.paxsenix.biz.id/dl/ig"
        params = {"url": url}
        headers = {"accept": "*/*"}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, params=params, headers=headers) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        if not data.get("ok", False):
                            await utils.answer(message, self.strings("error"))
                            return

                        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—Å—ã–ª–∫–∞–º –Ω–∞ –≤–∏–¥–µ–æ
                        video_urls = [item.get("url") for item in data.get("url", []) if item.get("type") == "video"]

                        if video_urls:
                            for download_url in video_urls:
                                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ URL
                                file_name = hashlib.md5(download_url.encode('utf-8')).hexdigest() + ".mp4"
                                file_path = f"/tmp/{file_name}"

                                async with session.get(download_url) as file_resp:
                                    if file_resp.status == 200:
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ —Ñ–∞–π–ª
                                        with open(file_path, "wb") as file:
                                            file.write(await file_resp.read())

                                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
                                        await message.client.send_file(
                                            message.peer_id,
                                            file_path,
                                            caption=self.strings("success"),
                                        )
                                        await message.delete()
                                    else:
                                        await utils.answer(message, self.strings("error"))
                        else:
                            await utils.answer(message, self.strings("error"))
                    else:
                        await utils.answer(message, self.strings("error"))
        except Exception as e:
            await utils.answer(message, self.strings("error"))
            raise e
